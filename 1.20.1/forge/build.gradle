plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    //accessWidenerPath = project(":1.20.1:common").loom.accessWidenerPath

    forge {
        //convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "yuushya-common.mixins.json"
        mixinConfig "yuushya.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$parent.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$parent.architectury_api_version"

    common(project(path: ':1.20.1:common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':1.20.1:common', configuration: 'transformProductionForge')
}

processResources {
//    inputs.property 'version', project.version
//
//    filesMatching('META-INF/mods.toml') {
//        expand version: project.version
//    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
