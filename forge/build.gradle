plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfigs("yuushya-common.mixins.json" ,"yuushya.mixins.json")
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}
def resourceTargets = ['META-INF/mods.toml']
def replaceProperties = [
        mod_name: mod_name,
        mod_version: mod_version_forge,
        mod_homepage:mod_homepage,
        mod_source:mod_source,
        mod_credits:mod_credits,
        mod_authors: mod_authors,
        mod_description: mod_description,
        mod_licence:mod_licence]
version=replaceProperties.mod_version
processResources {
//    inputs.property "version", project.version
//
//    filesMatching("META-INF/mods.toml") {
//        expand "version": project.version
//    }
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
//    relocate( 'com.google.gson','my.com.google.gson')
//    dependencies ({
//        include(dependency("com.google.code.gson:gson:2.8.9"))
//    })
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

}


remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
    manifest {
        attributes(
                'Main-Class': 'com.yuushya.ui.Main',
                'Class-Path': 'gson-2.8.9.jar ../../../libraries/com/google/code/gson/gson/2.8.9/gson-2.8.9.jar ../libraries/com/google/code/gson/gson/2.8.9/gson-2.8.9.jar'
        )
    }

}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
